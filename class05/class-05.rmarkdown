---
title: "Class 05: Data Visualization with GGPLOT"
author: "Mia Fava"
format: html
---



## Plotting in R

R has lot's of ways to make plots and figures. This includes so-called **base** graphics and packages like **ggplot2**



```{r}
plot(cars)
```




This is a **base** R plot of the in-built `cars` dataset that has only two columns:



```{r}
cars
```




>Q. How would we plot this wee dataset with **ggplot2**?

All ggplot figures have at least 3 layers:

-**data**
-**aes** (how data map to the plot)
-**geoms** (how we draw the plot, lines, points, etc)

Before I use any new packages I need to download and install it with the `install.packages()` command. 

I never use `install.packages()` within my quarto document otherwise I will install the package over and over and over again, which is silly! 

Once a package is installed I can load it up with the `libraary()` function



```{r}
# install.packages("ggplot2")
library(ggplot2)
ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point()
```





Key point: For simple plots (like the one above) ggplot is more verbose (we need to do more typing) but as plots get more complicated ggplot starts to be more clear and simple than base R plot()



```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() + 
  geom_smooth(method="lm",se = FALSE ) +
  labs(title="Stopping distance of old cars", x="Speed (MPH)", y="Stopping distance (ft)", subtitle = "From the in-built cars dataset", caption="Dataset: 'cars'") +
  theme_bw()
```

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
nrow(genes)
colnames(genes)
table(genes$State)
round( table(genes$State)/nrow(genes) * 100,2)
```



The key functions here were:
`nrow()` and `ncol()`
`table()` is very useful for getting counts finally `round()`

A first plot:



```{r}
ggplot(genes) + 
    aes(x=Condition1, y=Condition2) +
    geom_point() 
```


A Second Plot:



```{r}
ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point() 
```



Change the color 

A Third Plot:



```{r}
ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()+
scale_colour_manual(values=c("blue","gray","red")) +
    labs(title="Gene Expresion Changes Upon Drug Treatment",
         x="Control (no drug) ",
         y="Drug Treatment")
```












## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:



```{r}
1 + 1
```



You can add options to executable code like this 



```{r}
#| echo: false
2 * 2
```



The `echo: false` option disables the printing of code (only output is displayed).


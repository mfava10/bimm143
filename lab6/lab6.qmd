---
title: "class 6: R functions"
author: "Mia Fava"
format: pdf
---

Today we are going to explore R functions and beging think about writing our own functions

Let's start simple and write our first function to ass some numbers

Every function in R has at least 3 things

-a **name**, we pick this
-one or more input **arguments**
-the **body**, where the work actually happens 


```{r}
add <- function(x,y=1, z=0){
  x + y 
}
```

Now lets try it out 

```{r}
add(c(10,1,1,10),1)
```
```{r}
add (10)
add (10,20)
add (10,10,20)
```

```{r}
mean(c(10,10,NA),na.rm=TRUE)
```

## Lab sheet work


> Q1 Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Begin by calculating the average for student1
```{r}
student1
mean(student1)
```

try on student2
```{r}
student2
mean(student2,na.rm=TRUE)
```

and student3
```{r}
student3
mean(student3,na.rm=TRUE)
```

Hmm...this sucks! I need to find something else and back to this issue of missing values (NAs).

We also want to drop the lowest score from a given student set of scores. 

```{r}
student1
```

```{r}
student1[-8]
```

We can try the `min()` function to find lowest score 
```{r}
min(student1)
```

We can also try `which.min()` to find the location of the lowest score, not the value itself
```{r}
which.min(student1)
```

Lets put these two things together 

```{r}
student1[which.min(student1)]
mean(student1[which.min(student1)])
```

We need to deal with NA (missing values) somehow? 

One idea is we make all the NA values zero

```{r}
x <- student2
x
x[2]<- 0
x
```

```{r}
x <- student2
x
is.na(x)
x[is.na(x)]
which(is.na(x))
```

```{r}
x<-student1
x
x[ is.na(x) ] = 0
x
```

So far we have a working snippet: 

```{r}
x<- student3
##3 Finds NAs in 'x' and make them 0
x[ is.na(x) ] <- 0

# finds the min value and rm's it before getting mean
mean(x[-which.min(x)])
```

Now turn it into a function
```{r}
grade <- function(x) {
  ##3 Finds NAs in 'x' and make them 0
x[ is.na(x) ] <- 0

  # drop lowest and find mean
mean(x[-which.min(x)])
}
```

```{r}
grade(student1)
```

```{r}
grade(student2)
```
```{r}
grade(student3)
```

Now `apply()` to our gradebook
```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names = 1)
head(gradebook)
```
To use `apply()` function of this `gradebook`dataset I need to decide whether I want to apply 

```{r}
apply(gradebook, 2, grade)
```


```{r}
ans <- apply(gradebook, 1, grade)
ans
```

> Q2 Using your grade() function and the supplied gradebook, Who is the top scoring student
overall in the gradebook? [3pts]

```{r}
which.max(ans)

ans[which.max(ans)]
```
> Q3 From your analysis of the gradebook, which homework was toughest on students (i.e. obtained
the lowest scores overall? [2pts]

```{r}
masked_gradebook <- gradebook
masked_gradebook[ is.na(masked_gradebook)] = 0
apply(masked_gradebook, 2, mean)
```

```{r}
which.min(apply(masked_gradebook, 2, mean))
```

I could modify the `grade()` function to do this too - i would not drop the lowest options 

```{r}
grade2 <- function(x, drop.low=TRUE) {

  ## Finds NAs in 'x' and make them 0
x[ is.na(x) ] <- 0

if(drop.low){
  cat("hello low")
  # drop lowest and find mean
out <- mean(x[-which.min(x)])
} else {
  out <- mean(x)
  cat("No low")
}
return(out)
}
```
```{r}
grade2(student1,TRUE)
```

>Q4. Optional Extension: From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)? [1pt]


The function to calculate correlations in R is called `cor()`

```{r}
cor(ans, masked_gradebook$hw1)
```

```{r}
cor(ans, masked_gradebook$hw3)
```

```{r}
cor(ans, masked_gradebook$hw4)
```

```{r}
cor(ans, masked_gradebook$hw5)
```

I want to `apply()` the `cor()` function over the `masked_gradebook` and use the `ans` scores for the class

```{r}
apply(masked_gradebook, 2, cor, y=ans)
```

```{r}
which.max(apply(masked_gradebook, 2, cor, ans))
```



> Q5 Make sure you save your Quarto document and can click the “Render” (or Rmarkdown”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF to gradescope. [1pt]
